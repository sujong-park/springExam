<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.busanit501.project01.mapper.TodoMapper">
    <select id="getTime" resultType="string">
        select now()
    </select>

    <!--    #{title} -> TodoVO, getTitle 로 접근하는 것과 동일한 효과-->
    <insert id="insert">
        insert into tbl_todo (title, dueDate, writer)
        values (#{title}, #{dueDate}, #{writer})
    </insert>

    <!--    여러개 행 조회, 각행의 요소, TodoVO , -->
    <select id="selectAll" resultType="com.busanit501.project01.domain.TodoVO">
        select *
        from tbl_todo
        order by tno desc
    </select>

    <select id="selectOne" resultType="com.busanit501.project01.domain.TodoVO">
        select *
        from tbl_todo
        where tno = #{tno}
    </select>

    <delete id="delete">
        delete
        from tbl_todo
        where tno = #{tno}
    </delete>

    <update id="update">
        update tbl_todo
        set title    = #{title},
            dueDate  = #{dueDate},
            finished = #{finished}
        where tno = #{tno}
    </update>

    <!--    페이징 처리해서, 전체 조회-->
    <!--    #{skip} -> 동작을 getSkip() -->
    <!--    <select id="selectList" resultType="com.busanit501.project01.domain.TodoVO">-->
    <!--        select * from tbl_todo order by tno desc limit #{skip}, #{size}-->
    <!--    </select>-->

    <!--     String[] types 배열로 , t(제목), w(작성자), tw(제목+작성자)-->

    <!--     1번째 과정-->
    <!--     첫번째 조건에서 생성된 sql-->
    <!--     select * from tbl_todo ? ? order by tno desc limit ?, ?-->

<!--     2번째 과정,-->
<!--    select * from tbl_todo ? ? -->
<!--     title like concat('%',?,'%')-->
<!--     writer like concat('%',?,'%')-->
<!--     order by tno desc limit ?, ?-->

<!--    3번째 과정-->
<!--    select * from tbl_todo -->
<!--    ( title like concat('%',?,'%') -->
<!--    OR -->
<!--    writer like concat('%',?,'%') ) -->
<!--    order by tno desc limit ?, ?-->

<!--    4번째 과정-->
<!--    select * from tbl_todo-->
<!--    WHERE-->
<!--    (-->
<!--    title like concat('%',?,'%')-->
<!--    OR-->
<!--    writer like concat('%',?,'%')-->
<!--    )-->
<!--    order by tno desc limit ?, ?-->

<!--    4번째 과정 2, types null 일경우, where 조건이 없는 sql 문장 확인.-->
<!--    select * from tbl_todo order by tno desc limit ?, ?-->

<!--    5번째 과정, 필터 과정. -->
<!--    trim 이용해서, -->
<!--    앞에 where  조건이 있다면, trim 이용해서 and 붙이고,-->
<!--    예시-->
<!--    elect * from tbl_todo WHERE ( title like concat('%',?,'%') -->
<!--    OR writer like concat('%',?,'%') ) -->
<!--    and finished = 1 order by tno desc limit ?, ?-->
<!--    -->
<!--    앞에 where  조건이 없다면, trim 이용해서 and 안 붙이고,-->
<!--    select * from tbl_todo -->
<!--    WHERE finished = 1 order by tno desc limit ?, ?-->

<!--    6번째 필터2, 기한 from, to 를 조건으로 할 때,-->
<!--    select * from tbl_todo -->
<!--    WHERE finished = 1 and dueDate between ? and ? order by tno desc limit ?, ?-->

<!--    6번째 필터2, 필터 조건 1개인 경우, and 없는 부분 확인-->
<!--    select * from tbl_todo -->
<!--    WHERE dueDate between ? and ? order by tno desc limit ?, ?-->

<!--    완성된 sql, 최종 문장 구조-->
<!--    select * from tbl_todo -->
<!--    WHERE -->
<!--    ( -->
<!--    title like concat('%',?,'%') -->
<!--    OR -->
<!--    writer like concat('%',?,'%') -->
<!--    ) -->
<!--    and finished = 1 -->
<!--    and dueDate between ? and ? -->
<!--    order by tno desc limit ?, ?-->

    <select id="selectList" resultType="com.busanit501.project01.domain.TodoVO">
        select * from tbl_todo
        <include refid="search"></include>
        order by tno desc limit #{skip}, #{size}
    </select>

    <select id="getCount" resultType="int">
        select count(tno)
        from tbl_todo
        <include refid="search"></include>
    </select>

    <sql id="search">
        <where>
            <if test="types != null and types.length >0">
                <foreach collection="types" item="type"
                         open="(" close=")" separator="OR">

                    <if test="type == 't'.toString()">
                        title like concat('%',#{keyword},'%')
                    </if>
                    <if test="type == 'w'.toString()">
                        writer like concat('%',#{keyword},'%')
                    </if>
                </foreach>
            </if>

            <if test="finished2">
                <trim prefix="and">
                    finished = 1
                </trim>
            </if>

            <if test="from != null and to != null">
                <trim prefix="and">
                    dueDate between #{from} and #{to}
                </trim>
            </if>

        </where>
    </sql>


</mapper>








